---
layout: post
title: '[BoostCourse] 웹 프로그래밍 프로젝트 4-1 / 예약서비스: 상세페이지(BE) / 1차 제출(PASS)'
tags: [BoostCourse]
image: '/images/posts/boostcourse.JPG'
---

### *본 포스팅은 부스트코스 웹 프로그래밍 에이스 과정 학습내용공유 미션입니다.*  


프로젝트 4는 메인페이지의 상품이미지를 클릭하면 이동하는 상세페이지의 구현이다.  
프로젝트 4에서는 FE에 대한 개념(객체 리터럴 패턴, Javascript 라이브러리, 클린코드)을 추가적으로 배우고 상세페이지를 구현하는 데 초점이 맞춰져있다.  
프로젝트 4의 BE파트는 상세페이지 구현에 필요한 데이터를 받아오는 API의 설계이다.  
product API의 displayInfoId가 파라미터로 전달되는 API를 구현하였다.  
![Alt text](/images/posts/post_2/post_2_api.JPG)
  
설계는 다음 순서로 진행한다.  
1. DTO  
2. DAO  
3. Service  
4. Controller  
  
# 1. DTO

[Swagger API 링크](http://49.236.147.192:9090/swagger-ui.html)  
Swagger API의 내용을 참고하여 필요한 DTO를 작성하였다.  
이 부분에서는 이미 완성되어 제공되는 API를 참고하여 필요한 속성을 선언해주면 되므로 크게 어려운 부분이 없었다.  
(백엔드 개발자는 API 설계에 필요한 데이터와 구조가 무엇인지 생각해야할 것 같은데, 이 프로젝트에서는 완성된 API 형태가 제공되어 설계하기가 수월한 것 같다.)  
<br/>
DTO 파트에서는 2가지 고려사항이 있었다.  
### 1) 속성을 어떤 타입으로 선언할 것인가?
특히, DB의 DATETIME 타입을 받아오는 경우에 java에서 어떤 타입을 선언할 지 결정해야한다.  
LocalDateTime과 String 타입 중에서 간단하게 처리하도록 String으로 처리하였다.
이 부분에 대한 질문과 리뷰어님의 답변  
**[Question]**
![Alt text](/images/posts/post_2/post_2_question_1.JPG)
<br/>
**[Answer]**
![Alt text](/images/posts/post_2/post_2_question_1_answer.JPG)

<br/><br/>

### 2) DisplayInfo 응답객체와 CommentImages 처리
필요한 DTO를 작성하고, API의 응답객체로 DisplayInfoResponse를 따로 만들었다.  
프로젝트 3-1에서 '**map객체 vs Generic을 활용한 응답클래스**' 이슈가 있었다.  
map의 key이름이 바뀌는 경우 유지보수가 힘들다는 문제로 인해 응답클래스를 따로 작성하도록 리뷰받았었다.  
프로젝트 4-1에서도 마찬가지로 DisplayInfo 응답클래스를 따로 작성하였고  
이 때, Comment부분에 들어가는 CommentImages에 대한 처리는 Service 부분에서 다루었다.  
즉, CommentImages는 응답클래스의 속성으로 선언하지 않는다.  
프로젝트 3-1 당시에 질문과 답변  
![Alt text](/images/posts/post_2/post_2_question_2_answer.JPG)
![Alt text](/images/posts/post_2/post_2_question_3.JPG)
![Alt text](/images/posts/post_2/post_2_question_3_answer.JPG)
<br/><br/>



*****



# 2. DAO

Promotion도 ajax를 통해 프로모션 데이터를 받아와서 template를 이용하여 이미지를 화면에 출력한 후 슬라이딩 기능을 구현하였다.  
1) Ajax 통신을 통한 프로모션 데이터 받기  
2) Template을 이용한 프로모션 이미지 출력  
3) 슬라이딩 구현  

### 1) 프로모션 데이터 받기
**sendAjaxForPromotions() :**  
Promotion API를 이용한 ajax 통신을 통해 프로모션 데이터를 받아와서 bindPromotionTemplateFunc 함수를 호출한다.

<br/>

### 2) 프로모션 이미지 출력
**bindPromotionTemplateFunc(promotionItems) :**  
Template을 이용하여 메인페이지의 프로모션 영역에 이미지를 출력하고 slidingImplFunc 함수를 setInterval 함수를 통해 호출한다.  
setInterval 함수를 통해 특정 시간마다 이미지가 바뀌는 슬라이딩이 실행된다. 

<br/>

### 3) 슬라이딩 구현
**slidingImplFunc() :**  
자연스러운 슬라이딩 구현을 위해 프로모션 영역에서 나가는 이미지(slidingOutImg)와 들어오는 이미지(slidingInImg)를 구분한다.  
![Alt text](/images/posts/post_1/post_1_promotion_1.JPG)
slidingOutImg을 바로 slidingInImg 부분으로 옮기면 이동하는 동안 이미지가 옮겨져서 프로모션 영역에는 공백이 보여진다.  
따라서 setTimeout을 통해 이동하는 시간만큼 딜레이한 후에 이미지를 옮기면 된다.  
<br/>
<br/>
정리하면 아래 그림과 같은 방식으로 슬라이딩이 구현된다.  
![Alt text](/images/posts/post_1/post_1_promotion_2.JPG)

<br/>

### 4) Question & FeedBack
* 위 내용은 피드백을 반영한 내용이고 실제 제출에서는 setTimeout을 이용하지 않고 slidingOutImg이 이동하는 동안 사라지는 현상을 해결하기 위해 
slidingOutImg을 복제하여 slidingInImg에 이동시켰다. 이 부분을 개선하여 반영하였다.  
![Alt text](/images/posts/post_1/post_1_question_4.JPG)
<br/>
<br/>
* 전역변수 사용을 최소화하려는 노력으로 했던 질문이다. 코드없이 이해하기 힘든 부분이지만 함수에서 필요한 변수들을 함수 밖에서 선언했던 문제였다.  
결국 함수 밖에서 선언했던 변수는 전역변수로 바뀌어 선언되었던 문제가 있었다.  
Javascript의 closure 개념에 대해 공부하고 개선하게 되었다.
![Alt text](/images/posts/post_1/post_1_question_5.JPG)
<br/>
<br/>
**Closure**  
 [*기본 개념과 예시 링크*](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures)  
 핵심은 아래 문장이다.  
 > 클로저는 함수와 함수가 선언된 어휘적 환경의 조합이다. 이 환경은 클로저가 생성된 시점의 유효 범위 내에 있는 모든 지역 변수로 구성된다.  

 즉, 클로저는 리턴되는 함수와 그 함수가 사용할 수 있는 모든 지역 변수의 조합을 의미한다.  
 코드를 공개할 수 없어서 이해하기 힘든 부분이 있지만, 설명하자면  
 구현 코드에서 클로저는 slidingImplFunc에서 리턴하는 slidingImpl 함수와 slidingImpl이 이용하는 모든 지역 변수를 의미한다.  
 위 질문에 대한 피드백을 반영하려면 슬라이딩 기능을 구현하는 데 필요한 변수를 slidingImplFunc에 선언하고 slidingImpl을 리턴하면 되는 것이다.
