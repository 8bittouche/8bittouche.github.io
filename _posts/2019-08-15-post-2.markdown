---
layout: post
title: '[BoostCourse] 웹 프로그래밍 프로젝트 4-1 / 예약서비스: 상세페이지(BE) / 1차 제출(PASS)'
tags: [BoostCourse]
image: '/images/posts/boostcourse.JPG'
---

### *본 포스팅은 부스트코스 웹 프로그래밍 에이스 과정 학습내용공유 미션입니다.*  

<br/>

# 0. 요약
###### - 프로젝트 4는 메인페이지의 상품이미지를 클릭하면 이동하는 상세페이지의 구현이다.  
###### - 프로젝트 4에서는 FE에 대한 개념(객체 리터럴 패턴, Javascript 라이브러리, 클린코드)을 추가적으로 배우고 상세페이지를 구현하는 데 초점이 맞춰져있다.  
###### - 프로젝트 4의 BE파트는 상세페이지 구현에 필요한 데이터를 받아오는 API의 설계이다.  
&nbsp;&nbsp; product API의 displayInfoId가 파라미터로 전달되는 API를 구현하였다.
&nbsp;&nbsp; ![Alt text](/images/posts/post_2/post_2_api.JPG){: height="40px"}<br/>

<br/>

다음 순서로 진행한다.  
1. DTO  
2. DAO  
3. Service & Controller  
4. FeedBack 
  
<br/>

*****

# 1. DTO

[Swagger API 링크](http://49.236.147.192:9090/swagger-ui.html)  
Swagger API의 내용을 참고하여 필요한 DTO를 작성하였다.  
이미 완성되어 제공되는 API를 참고하여 필요한 속성을 선언해주면 되므로 크게 어려운 부분은 없었다.  
(백엔드 개발자는 API 설계에 필요한 데이터와 구조가 무엇인지 생각해야할 것 같은데, 이 프로젝트에서는 완성된 API 형태가 제공되어 설계하기가 수월한 것 같다.)  <br/>

DTO 파트에서는 2가지 고려사항이 있었다.  
### 1) 속성을 어떤 타입으로 선언할 것인가?
특히, DB의 DATETIME 타입을 받아오는 경우에 java에서 어떤 타입을 선언할 지 결정해야한다.  
LocalDateTime과 String 타입 중에서 간단하게 처리하도록 String으로 처리하였다.  
<br/>
이 부분에 대한 질문과 리뷰어님의 답변  
**[Question]**
![Alt text](/images/posts/post_2/post_2_question_1.JPG)<br/>

**[Answer]**
![Alt text](/images/posts/post_2/post_2_question_1_answer.JPG)<br/><br/>


### 2) DisplayInfoResponse 응답객체와 CommentImages 처리
필요한 DTO를 작성하고, API의 응답객체로 DisplayInfoResponse를 따로 만들었다.  
프로젝트 3-1에서 '**map객체 vs Generic을 활용한 응답클래스**' 이슈가 있었다.  
map의 key이름이 바뀌는 경우 유지보수가 힘들다는 문제로 인해 응답클래스를 따로 작성하도록 리뷰받았었다.  
프로젝트 4-1에서도 마찬가지로 DisplayInfoResponse 응답클래스를 따로 작성하였고  
이 때, Comment부분에 들어가는 CommentImages에 대한 처리는 Service 부분에서 다루었다.  
즉, CommentImages는 응답클래스의 속성으로 선언하지 않는다.  <br/>

**프로젝트 3-1 당시에 질문과 답변**  
**[Answer]**
![Alt text](/images/posts/post_2/post_2_question_2_answer.JPG)<br/>

**[Question]**
![Alt text](/images/posts/post_2/post_2_question_3.JPG)<br/>

**[Answer]**
![Alt text](/images/posts/post_2/post_2_question_3_answer.JPG)<br/><br/>



*****


# 2. DAO
Dao 파트에서는 3가지 정도 고려사항이 있었다.  
### 1) Dao를 나누는 기준은 무엇인가?
각 Dto마다 Dao를 만들어하는지 Service마다 Dao를 만들어야하는지.. Dao를 나누는 기준이 무엇인지 헷갈렸다.  
(실무에서 실제로 어떻게 Dao를 나누고 있는지 볼 수 있다면 바로 이해할 수 있겠지만... 
아직 실무경험이 없는 웹 개발 입문자 입장에서는 이런 사소한 것도 헷갈렸다..)  
적절히 의미있는 것들끼리 묶어서 Dao를 작성하였다.  
(Product끼리, DisplayInfo끼리, Comment끼리.. 이런식)
<br/>

### 2) SQL문 작성
SQL문 작성에서 고려할 것은 다음 3가지였다.  
* AS문으로 컬럼 이름과 클래스 속성 맞추기(RowMapper 매핑)
* JOIN문 활용
* 상수 처리
<br/>

### 3) NamedParameterJdbcTemplate 활용
Dao의 각 메소드마다 활용하는 NamedParameterJdbcTemplate의 메소드가 다를 수 있다.  
NamedParameterJdbcTemplate 레퍼런스를 참고하여 작성했다.  
[NamedParameterJdbcTemplate 레퍼런스 링크](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html)
<br/>
<br/>

*****

<br/>

# 3. Service & Controller
Dto와 Dao 작성이 끝나면 Service Layer와 Controller Layer에서는 크게 고려해야할 부분이 많지는 않았다.  
Service Layer에서 Dao를 통해 필요한 데이터를 받아와서 DisplayInfoResponse 응답객체를 리턴하고  
Controller Layer에서는 Service layer에서 리턴받은 응답객체를 그대로 리턴하였다.  
즉, 필요한 로직은 전부 Service Layer에 넣고 Controller Layer는 응답객체를 리턴하는 정도로만 구현하였다.  
<br/>
<br/>

*****

# 4. FeedBack
![Alt text](/images/posts/post_2/post_2_feedback_1.JPG){: height="160px"}<br/>
![Alt text](/images/posts/post_2/post_2_feedback_4.JPG){: height="140px"}<br/>
![Alt text](/images/posts/post_2/post_2_feedback_5.JPG){: height="150px"}<br/>
사소한 코딩습관을 지적해주셔서 좋았다.<br/><br/>

![Alt text](/images/posts/post_2/post_2_feedback_2.JPG){: height="350px"}<br/>
![Alt text](/images/posts/post_2/post_2_feedback_3.JPG){: height="150px"}<br/>
피드백 해주신 부분을 수정하여 반영하였다.<br/><br/>
<br/>
<br/>