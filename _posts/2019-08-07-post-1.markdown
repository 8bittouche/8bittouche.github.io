---
layout: post
title: '[BoostCourse] 웹 프로그래밍 프로젝트 3-2 / 예약서비스: 메인페이지(FE) / 1차 제출(PASS)'
image: '/images/posts/boostcourse.JPG'
---



BE파트를 통해 구현된 API를 이용하여 동적으로 필요한 데이터를 받아 Category와 Promotion 기능을 구현하였다.  

# 1. Category

Category는 크게 3가지로 구성된다.  
1) 마우스 클릭에 따라 선택되는 카테고리 탭  
2) 선택된 카테고리의 상품 출력  
3) '더보기'버튼 클릭 시 추가 상품 출력  

각 구성은 데이터를 받아오는 ajax함수와 기능을 구현하는 함수로 구현하였다.  
즉, 각 구성마다 2가지 함수로 이루어져 총 6개의 함수로 구현하였다.  


### 1) 카테고리 탭
##### o sendAjaxForCategories()  
Category API를 이용한 ajax 통신을 통해 카테고리 id와 name을 받아와서 initCategoryTab 함수를 호출한다.<br/>
##### o initCategoryTab(categories)  
template를 이용하여 카테고리 탭을 구성한다.


### 2) 카테고리 상품 출력
##### o sendAjaxToInit(selectedTab)  
Product API를 이용한 ajax 통신을 통해 선택된 카테고리의 상품 데이터를 받아와서 initCategoryView 함수를 호출한다.<br/>
##### o initCategoryView(products, selectedTab)  
initCategoryView 함수는 3가지 기능을 한다.
* template를 이용한 상품 출력
* 상품 총 개수 표시
* 선택된 카테고리 탭의 초록색 표시


### 3) '더보기'버튼
##### o sendAjaxToMore(start)  
Product API를 이용한 ajax 통신을 통해 추가 상품 데이터를 받아온다.  
start를 파라미터로 하여 추가 상품의 시작지점을 표시한다.<br/>
##### o displayMoreView(products)  
받아온 상품 데이터를 template를 이용하여 출력한다.


### 4) Question & FeedBack
* Ajax 통신을 이용하여 처음으로 프론트엔드 구현을 했기 때문에 생소한 부분이 있었다.  
Ajax 함수에서 다른 함수를 연쇄적으로 호출하는 방식이 코드에 대한 이해도를 떨어뜨린다는 생각이 들었다.  
그래서 이 부분을 각 함수가 연관이 없도록 나누기 위해 ajax 호출을 동기식으로 바꾸는 시도를 해보았지만   
브라우저가 응답을 멈추는 문제가 생기기 때문에 함수를 연쇄적으로 호출하는 것이 맞다는 리뷰를 받았다.  
![Alt text](/images/posts/post_1_question_1.JPG)
* 하드코딩을 최대한 줄이려고 하였다.
![Alt text](/images/posts/post_1_question_2.JPG)
피드백을 반영한 코드
![Alt text](/images/posts/post_1_question_2_feedback.JPG)
* 아무 생각없이 코딩했던 부분인데 출력해야하는 상품 수가 늘어나는 상황에서 코드 수정이 필요없도록 작성할 수 있었다.
항상 코딩할 때는 유지보수에 대해 생각해야한다는 것을 느꼈다.
![Alt text](/images/posts/post_1_question_3.JPG)



*****



# 2. Promotion
