---
layout: post
title: '[BoostCourse] 웹 프로그래밍 프로젝트 3-2 / 예약서비스: 메인페이지(FE) / 1차 제출(PASS)'
image: '/images/posts/boostcourse.JPG'
---



BE파트를 통해 구현된 API를 이용하여 동적으로 필요한 데이터를 받아 Category와 Promotion 기능을 구현하였다.  

# 1. Category

Category는 크게 3가지로 구성된다.  
1) 마우스 클릭에 따라 선택되는 카테고리 탭  
2) 선택된 카테고리의 상품 출력  
3) '더보기'버튼 클릭 시 추가 상품 출력  

각 구성은 데이터를 받아오는 ajax함수와 기능을 구현하는 함수로 구현하였다.  
즉, 각 구성마다 2가지 함수로 이루어져 총 6개의 함수로 구현하였다.  


### 1) 카테고리 탭
**sendAjaxForCategories() :**  
Category API를 이용한 ajax 통신을 통해 카테고리 id와 name을 받아와서 initCategoryTab 함수를 호출한다.

**initCategoryTab(categories) :**  
template를 이용하여 카테고리 탭을 구성한다.

<br/>

### 2) 카테고리 상품 출력
**sendAjaxToInit(selectedTab) :**  
Product API를 이용한 ajax 통신을 통해 선택된 카테고리의 상품 데이터를 받아와서 initCategoryView 함수를 호출한다.

**initCategoryView(products, selectedTab) :**  
initCategoryView 함수는 3가지 기능을 한다.
* template를 이용한 상품 출력
* 상품 총 개수 표시
* 선택된 카테고리 탭의 초록색 표시

<br/>

### 3) '더보기'버튼
**sendAjaxToMore(start) :**  
Product API를 이용한 ajax 통신을 통해 추가 상품 데이터를 받아온다.  
start를 파라미터로 하여 추가 상품의 시작지점을 표시한다.

**displayMoreView(products) :**  
받아온 상품 데이터를 template를 이용하여 출력한다.

<br/>

### 4) Question & FeedBack
* Ajax 통신을 이용하여 처음으로 프론트엔드 구현을 했기 때문에 생소한 부분이 있었다.  
Ajax 함수에서 다른 함수를 연쇄적으로 호출하는 방식이 코드에 대한 이해도를 떨어뜨린다는 생각이 들었다.  
그래서 이 부분을 각 함수가 연관이 없도록 나누기 위해 ajax 호출을 동기식으로 바꾸는 시도를 해보았지만   
브라우저가 응답을 멈추는 문제가 생기기 때문에 함수를 연쇄적으로 호출하는 것이 맞다는 리뷰를 받았다.  
![Alt text](/images/posts/post_1/post_1_question_1.JPG)
<br/>
<br/>
* 하드코딩을 최대한 줄이려고 하였다.
![Alt text](/images/posts/post_1/post_1_question_2.JPG)
<br/><br/>
피드백을 반영한 코드
![Alt text](/images/posts/post_1/post_1_question_2_feedback.JPG)
<br/>
<br/>
* 아무 생각없이 코딩했던 부분인데 출력해야하는 상품 수가 늘어나는 상황에서 코드 수정이 필요없도록 작성할 수 있었다.
항상 코딩할 때는 유지보수에 대해 생각해야한다는 것을 느꼈다.
![Alt text](/images/posts/post_1/post_1_question_3.JPG)



*****



# 2. Promotion

Promotion도 ajax를 통해 프로모션 데이터를 받아와서 template를 이용하여 이미지를 화면에 출력한 후 슬라이딩 기능을 구현하였다.  
1) Ajax 통신을 통한 프로모션 데이터 받기  
2) Template을 이용한 프로모션 이미지 출력  
3) 슬라이딩 구현  

### 1) 프로모션 데이터 받기
**sendAjaxForPromotions() :**  
Promotion API를 이용한 ajax 통신을 통해 프로모션 데이터를 받아와서 bindPromotionTemplateFunc 함수를 호출한다.

<br/>

### 2) 프로모션 이미지 출력
**bindPromotionTemplateFunc(promotionItems) :**  
Template을 이용하여 메인페이지의 프로모션 영역에 이미지를 출력하고 slidingImplFunc 함수를 setInterval 함수를 통해 호출한다.  
setInterval 함수를 통해 특정 시간마다 이미지가 바뀌는 슬라이딩이 실행된다. 

<br/>

### 3) 슬라이딩 구현
**slidingImplFunc() :**  
자연스러운 슬라이딩 구현을 위해 프로모션 영역에서 나가는 이미지(slidingOutImg)와 들어오는 이미지(slidingInImg)를 구분한다.  
![Alt text](/images/posts/post_1/post_1_promotion_1.JPG)
slidingOutImg을 바로 slidingInImg 부분으로 옮기면 이동하는 동안 이미지가 옮겨져서 프로모션 영역에는 공백이 보여진다.  
따라서 setTimeout을 통해 이동하는 시간만큼 딜레이한 후에 이미지를 옮기면 된다.  
<br/>
<br/>
정리하면 아래 그림과 같은 방식으로 슬라이딩이 구현된다.  
![Alt text](/images/posts/post_1/post_1_promotion_2.JPG)

<br/>

### 4) Question & FeedBack
* 위 내용은 피드백을 반영한 내용이고 실제 제출에서는 setTimeout을 이용하지 않고 slidingOutImg이 이동하는 동안 사라지는 현상을 해결하기 위해 
slidingOutImg을 복제하여 slidingInImg에 이동시켰다. 이 부분을 개선하여 반영하였다.  
![Alt text](/images/posts/post_1/post_1_question_4.JPG)
<br/>
<br/>
* 전역변수 사용을 최소화하려는 노력으로 했던 질문이다. 코드없이 이해하기 힘든 부분이지만 함수에서 필요한 변수들을 함수 밖에서 선언했던 문제였다.  
결국 함수 밖에서 선언했던 변수는 전역변수로 바뀌어 선언되었던 문제가 있었다.  
Javascript의 closure 개념에 대해 공부하고 개선하게 되었다.
![Alt text](/images/posts/post_1/post_1_question_5.JPG)
<br/>
<br/>
**Closure**  
 [*기본 개념과 예시 링크*](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures)  
 핵심은 아래 문장이다.  
 > 클로저는 함수와 함수가 선언된 어휘적 환경의 조합이다. 이 환경은 클로저가 생성된 시점의 유효 범위 내에 있는 모든 지역 변수로 구성된다.  

 즉, 클로저는 리턴되는 함수와 그 함수가 사용할 수 있는 모든 지역 변수의 조합을 의미한다.  
 코드를 공개할 수 없어서 이해하기 힘든 부분이 있지만, 설명하자면  
 구현 코드에서 클로저는 slidingImplFunc에서 리턴하는 slidingImpl 함수와 slidingImpl이 이용하는 모든 지역 변수를 의미한다.  
 위 질문에 대한 피드백을 반영하려면 슬라이딩 기능을 구현하는 데 필요한 변수를 slidingImplFunc에 선언하고 slidingImpl을 리턴하면 되는 것이다.
