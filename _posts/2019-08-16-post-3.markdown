---
layout: post
title: '[BoostCourse] 웹 프로그래밍 프로젝트 4-2 / 예약서비스: 상세페이지(FE) / 1차 제출(PASS)'
tags: [BoostCourse]
image: '/images/posts/boostcourse.JPG'
---

### *본 포스팅은 부스트코스 웹 프로그래밍 에이스 과정 학습내용공유 미션입니다.*  

<br/>

# 0. 요약
###### - 프로젝트 4는 메인페이지의 상품이미지를 클릭하면 이동하는 상세페이지의 구현이다.  
###### - 프로젝트 4에서는 FE에 대한 개념(객체 리터럴 패턴, Javascript 라이브러리, 클린코드)을 추가적으로 배우고 상세페이지를 구현하는 데 초점이 맞춰져있다.  
###### - 프로젝트 4의 FE파트는 상세페이지의 배경 영역(버튼, 무한슬리이딩 등), 접기/펼치기 기능, 한줄평 영역, 하단 상품정보 탭을 구현한다.


<br/>

다음 순서로 진행한다.  
1. 배경 영역 
2. 한줄평 영역  
3. 하단 상품정보 탭  
4. Question & FeedBack  
  
<br/>

*****
이번 파트에서는 **객체 리터럴 패턴**과 **클린코드**라는 주제를 염두에 두고 최대한 깔끔하고 이해하기 쉽게 코드를 작성하려고 노력했다.  
객체 리터럴 패턴으로 구현에 앞서 **'어떻게 객체를 나눌 것인가?'**라는 의문이 생겼다.  
처음에는 감이 잡히지 않아서 객체 리터럴 패턴을 염두에 두지않고 코딩을 시작했다.  
코딩을 하다보니 의미있는 부분들이 페이지의 영역별로 묶인다는 것을 알게되었고, 이를 객체 리터럴 패턴으로 수정하였다.  
<br/>
크게 5개의 객체로 나누고 필요한 DOM Element와 기능을 객체의 속성과 함수로 작성하였다.  
* sectionDetails : 상품설명 노출, 접기/펼치기 기능  
* sectionVisual : 배경이미지 노출, 배경이미지 무한슬라이딩, 페이지숫자, 넘기기 버튼  
* sectionReviewList : 한줄평 노출, 평점 매기기  
* sectionInfoTab : 상품 정보 노출, 상세정보/오시는길 탭  
* ajax : ajax 통신 (위 객체들의 함수 호출)  
<br/>

*****

# 1. 배경 영역
### 1) sectionDetails
sectionDetails는 상품설명을 노출하고 접기/펼쳐보기 버튼에 이벤트를 등록하여 접기/펼치기 기능을 구현한다.  
제공되는 style.css에 클래스 close3의 스타일이 구현되어있다.  
상품설명이 보이는 DOM Element에 close3클래스를 추가하거나 삭제하는 방식으로 접기/펼치기 기능을 구현하였다.  
이 때 className 프로퍼티와 classList 프로퍼티를 사용할 수 있다.  
(리뷰어님께서 classList 프로퍼티는 IE9에서 지원되지 않아 크로스 브라우징 측면에서 className 프로퍼티를 사용하는 것을 권장한다고 하셨다.  
**크로스 브라우징**이라는 이슈도 항상 염두해두어야 하는 것을 느꼈다.)  
<br/>

### 2) sectionVisual
sectionVisual은 먼저 ajax를 통해 받아온 배경이미지를 노출해야한다.  
배경이미지에 기타이미지(et)가 존재할 경우 페이지와 버튼의 구현이 달라지는 것을 고려하여 구현한다.  
이 부분에서 중요한 것은 역시 무한슬라이딩 구현이었다.  
프로젝트 3-2 프로모션 영역의 슬라이딩 구현과 비슷한 방식으로 구현하였지만 아이디어는 약간 달라졌다.  
아래와 같이 ma와 et 이미지를 번갈아가며 4개를 나열한다.  
버튼 클릭 시 이미지들이 이동하며 슬라이딩이 구현되고 4개의 이미지를 나열한 이유는 양방향으로 구현하기위한 목적이다.  
![Alt text](/images/posts/post_3/post_3_sliding_1.JPG)
![Alt text](/images/posts/post_3/post_3_sliding_2.JPG)
위 과정을 무한 반복한다.  
반대 방향도 마찬가지로 구현한다.  
<br/>

*****

# 2. 한줄평 영역
### 1) sectionReviewList
sectionReviewList는 한줄평 노출과 평점 매기기를 구현한다.  
이 부분은 크게 어려운 부분은 없었지만 보안 관련하여 리뷰를 받았다.  
Email을 노출할 때 '****' 문자열을 붙여서 노출했는데 이 부분이 문제가 되었다.  
개발자도구를 열어 코드를 수정하면 충분히 해당 Email 정보를 알아낼 수가 있었다.  
![Alt text](/images/posts/post_3/post_3_feedback_1.JPG)
난독화 툴에 대한 학습을 해야겠다.
<br/>

*****

# 3. 하단 상품정보 탭
### 1) sectionInfoTab
sectionInfoTab은 상품정보를 노출하고 상세정보/오시는길에 대해 탭 UI를 구현한다.  
이 부분 역시 카테고리 탭 구현과 접기/펼치기 기능 등을 구현하며 익혔던 방식과 유사하여 어려운 점은 없었다.
<br/>

*****

# 4. Question & FeedBack
![Alt text](/images/posts/post_3/post_3_feedback_2.JPG)
역시 유지보수성이 좋은 코드를 작성하는 습관을 길러야겠다. 
<br/><br/><br/>

![Alt text](/images/posts/post_3/post_3_feedback_3.JPG)
사소한 팁을 받아 좋았다.
<br/><br/><br/>

![Alt text](/images/posts/post_3/post_3_feedback_4.JPG)
이 질문을 통해 **SSR(Server Side Rendering) vs CSR(Client Side Rendering)** 이슈를 알 수 있었다.  
관련된 많은 글들이 있었지만 현재 상태에서 간단하게 알고가야할 부분만 정리했다.
[SSR vs CSR 참고링크](https://velog.io/@rjs1197/SSR%EA%B3%BC-CSR%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90)  
* SSR(Server Side Rendering)
    - 서버에서 View를 렌더링하여 전달하기 때문에 초기 View 로딩 속도가 빠르다.
    - 빠른 초기 View 로딩으로 인해 사용자는 매우 빠르게 화면이 로딩되었다고 느끼게 된다.
    - JS 파일을 다운로드 받아 적용하기 전까지 기능 동작이 이루어지지 않는다.
<br/>
* CSR(Client Side Rendering)
    - HTML, JS, CSS 등 리소스를 다운로드한 후에 브라우저에서 렌더링하기 때문에 초기 View 로딩 속도가 상대적으로 느리다.
    - View가 보여지는 동시에 기능이 동작한다.
<br/>
* SEO(Search Engine Optimization)
    - SEO는 검색 엔진에 서비스를 노출시키는 전략을 의미
    - CSR은 View 생성 전까지 검색 엔진 크롤러의 데이터 수집에 제한이 있어서 SEO에 유리하지 않음
    - SSR은 서버에서 View를 렌더링하여 제공하기 때문에 상대적으로 SEO에 유리해져 사용자 유입이 많음
 <br/>